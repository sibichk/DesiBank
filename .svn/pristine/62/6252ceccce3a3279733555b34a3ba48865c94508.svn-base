package com.spring.dao.impl;

import java.util.ArrayList;
import java.util.List;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Scope;
import org.springframework.orm.hibernate3.HibernateTemplate;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.support.TransactionSynchronizationManager;

import com.spring.dao.entity.Customer;
import com.spring.dao.entity.CustomerAccountInfo;
import com.spring.dao.entity.CustomerQuestionAnswer;
import com.spring.dao.entity.CustomerTransactionHistory;
import com.spring.dao.entity.Login;
import com.spring.dao.entity.PayeeInfo;
import com.spring.dao.entity.SecurityQuestions;
import com.spring.dao.entity.TransactionIdGenerator;
import com.spring.model.CustomerForm;
import com.spring.model.MiniStatementVO;
import com.spring.model.UserSessionVO;

@Repository
@Scope("singleton")
@Transactional
public class CustomerDaoImpl extends HibernateDaoSupport implements CustomerDao {

	@Autowired
	@Qualifier("sessionFactory")
	public void setSpringManageSessionFactory(SessionFactory sessionFactory) {
		super.setSessionFactory(sessionFactory);
	}

	@Transactional(propagation = Propagation.REQUIRED)
	// REQUIRED means this method always execute in transaction
	// This transaction only rollback for unchecked exception
	public String persistCustomer(CustomerForm customer) {
		System.out
				.println("Is spring transaction is enabled  = "
						+ TransactionSynchronizationManager
								.isActualTransactionActive());
		Customer pcustomer = BeanUtils.instantiate(Customer.class);
		BeanUtils.copyProperties(customer, pcustomer);
		Login login = new Login();
		CustomerQuestionAnswer questionanswer = new CustomerQuestionAnswer();
		login.setLoginid(customer.getUserid());
		login.setName(customer.getName());
		login.setPassword(customer.getPassword());
		if (customer.getUserid() != null
				&& customer.getUserid().equals("admin")) {
			login.setRole("admin");
			login.setLocked("no");
		} else
			login.setRole("customer");
		login.setLocked("no");
		questionanswer.setQuestion(customer.getQuestion1());
		questionanswer.setAnswer(customer.getAnswer1());
		questionanswer.setUserid(customer.getUserid());
		getHibernateTemplate().save(pcustomer);
		getHibernateTemplate().save(login);
		getHibernateTemplate().save(questionanswer);
		CustomerQuestionAnswer questionanswer2 = new CustomerQuestionAnswer();
		questionanswer2.setQuestion(customer.getQuestion2());
		questionanswer2.setAnswer(customer.getAnswer2());
		questionanswer2.setUserid(customer.getUserid());
		getHibernateTemplate().save(questionanswer2);
		
		return "success"; // returning the controll
	}

	@Override
	public List<CustomerForm> findCustomers() {
		List<Customer> customers = getHibernateTemplate().find("from Customer");
		List<CustomerForm> customerForms = new ArrayList<CustomerForm>(
				customers.size());
		for (Customer customer : customers) {
			CustomerForm customerForm = new CustomerForm();
			BeanUtils.copyProperties(customer, customerForm);
			customerForms.add(customerForm);
		}
		return customerForms;
	}

	@Override
	public UserSessionVO validateCustomer(String userid, String password) {
		List<Login> logins = getHibernateTemplate().find(
				"from Login l where l.loginid = ? and l.password = ?",
				new Object[] { userid, password });
		// UserSessionVO userSessionVO = new UserSessionVO();
		UserSessionVO userSessionVO = BeanUtils
				.instantiate(UserSessionVO.class);
		if (logins.size() == 1) {
			BeanUtils.copyProperties(logins.get(0), userSessionVO);
		}

		List<Customer> custs = getHibernateTemplate().find(
				"from Customer c where c.userid = ? and c.approved = '0'",
				new Object[] { userid });
		// UserSessionVO userSessionVO = new UserSessionVO();
		if (custs.size() == 1) {
			userSessionVO.setApproved("0");
		}

		return userSessionVO;
	}

	@Override
	public boolean deleteCustomer(int id) {
		boolean del = false;
		Session session = getSession();
		session.beginTransaction();
		try {
			Customer customer = (Customer) session.load(Customer.class, id);
			session.delete(customer);
			session.getTransaction().commit();
			session.close();
			del = true;
		} catch (Exception e) {
			e.printStackTrace();
			del = false;
		}
		return del;
	}

	@Override
	public CustomerForm getCustomer(int id) {
		List<Customer> customers = getHibernateTemplate().find(
				"from Customer c where c.id = ?", id);
		CustomerForm customerForm = new CustomerForm();
		if (customers.size() == 1)
			BeanUtils.copyProperties(customers.get(0), customerForm);
		return customerForm;

	}

	@Override
	public CustomerForm getCustomer(String userid) {
		List<Customer> customers = getHibernateTemplate().find(
				"from Customer c where c.userid = ?", userid);
		CustomerForm customerForm = new CustomerForm();
		if (customers.size() == 1)
			BeanUtils.copyProperties(customers.get(0), customerForm);
		return customerForm;
	}

	@Override
	public String updateCustomer(CustomerForm customer) {
		Customer pcustomer = BeanUtils.instantiate(Customer.class);
		BeanUtils.copyProperties(customer, pcustomer);
		getHibernateTemplate().update(pcustomer);

		return "success";
	}

	@Override
	public List<CustomerAccountInfo> getAccountDetails(String userid) {
		List<CustomerAccountInfo> acct = getHibernateTemplate().find(
				"from CustomerAccountInfo a where a.customerId = ?", userid);
		return acct;
	}

	@Override
	public List<CustomerAccountInfo> getAccount(String accountNum) {
		List<CustomerAccountInfo> acct = getHibernateTemplate().find(
				"from CustomerAccountInfo a where a.accountNumber = ?",
				accountNum);
		return acct;
	}

	@Override
	public List<MiniStatementVO> getTransactionDetails(String userid) {
		List<CustomerTransactionHistory> trans = getHibernateTemplate()
				.find("from CustomerTransactionHistory t where t.loginId = ?",
						userid);

		List<MiniStatementVO> miniStatementVO = new ArrayList<MiniStatementVO>(
				trans.size());
		for (CustomerTransactionHistory tx : trans) {
			MiniStatementVO miniStatement = BeanUtils
					.instantiate(MiniStatementVO.class);
			BeanUtils.copyProperties(tx, miniStatement);
			miniStatementVO.add(miniStatement);
		}
		return miniStatementVO;

	}

	@Override
	public String addPayee(PayeeInfo payee) {
		getHibernateTemplate().persist(payee);
		return "success";
	}

	@Override
	public List<PayeeInfo> getPayeeList(String userid) {
		List<PayeeInfo> payeeList = getHibernateTemplate().find(
				"from PayeeInfo p where p.customerId = ?", userid);
		return payeeList;
	}

	@Override
	public String persistCustomerTransaction(
			CustomerTransactionHistory transaction) {
		List<CustomerAccountInfo> acctList = getAccountDetails(transaction
				.getLoginId());
		CustomerAccountInfo custAcct = BeanUtils
				.instantiate(CustomerAccountInfo.class);

		List<CustomerAccountInfo> payeeAcctList = getAccount(transaction
				.getToAccountNumber());
		CustomerAccountInfo payeeAcct = payeeAcctList.get(0);
		System.out.println("cust acct before:" + custAcct);
		System.out.println("payee acct before:" + payeeAcct);
		long newCustAvBal, newCustTBal, newPayeeAvBal, newPayeeTBal;
		if (acctList.size() == 1)
			custAcct = acctList.get(0);

		if (custAcct.getAvBalance() > transaction.getAmount()) {
			// update customer acct balance
			newCustAvBal = custAcct.getAvBalance() - transaction.getAmount();
			newCustTBal = custAcct.getTavBalance() - transaction.getAmount();
			custAcct.setAvBalance(newCustAvBal);
			custAcct.setTavBalance(newCustTBal);
			System.out.println("cust acct after:" + custAcct);
			getHibernateTemplate().update(custAcct);
			// get payee account and update (add) amount to his balance.
			newPayeeAvBal = payeeAcct.getAvBalance() + transaction.getAmount();
			newPayeeTBal = payeeAcct.getTavBalance() + transaction.getAmount();
			payeeAcct.setAvBalance(newPayeeAvBal);
			payeeAcct.setTavBalance(newPayeeTBal);
			System.out.println("payee acct after:" + payeeAcct);
			getHibernateTemplate().update(payeeAcct);
			// Add transaction id and persist transaction
			System.out.println("transactiob obj:" + transaction);
			long x = 1;
			List<TransactionIdGenerator> transactionIdGenList = getHibernateTemplate()
					.find("from TransactionIdGenerator where id=?", x);
			TransactionIdGenerator transactionIdGenerator = transactionIdGenList
					.get(0);
			System.out
					.println("trasactionIdGenerator" + transactionIdGenerator);
			long tx_id = (long) transactionIdGenerator.getTransactionId() + 1;
			transaction.setTransactionId(tx_id);
			transactionIdGenerator.setTransactionId(tx_id);
			getHibernateTemplate().persist(transaction);
			getHibernateTemplate().update(transactionIdGenerator);
			return "success";
		} else {
			return "failed";
		}

	}

	@Override
	public UserSessionVO validateCustomerByUserId(String userid) {
		List<Login> customers = getHibernateTemplate().find(
				"from Login l where l.loginid = ?", new Object[] { userid });
		// UserSessionVO userSessionVO = new UserSessionVO();
		UserSessionVO userSessionVO = BeanUtils
				.instantiate(UserSessionVO.class);
		if (customers.size() == 1) {
			BeanUtils.copyProperties(customers.get(0), userSessionVO);
		}
		return userSessionVO;
	}

	@Override
	public List<SecurityQuestions> securityQns() {
		@SuppressWarnings("unchecked")
		List<SecurityQuestions> securityQuestions = (List<SecurityQuestions>)getHibernateTemplate().find(
				"from SecurityQuestions sq where sq.qid < 6");
		
		return securityQuestions;

	}
	
	@Override
	public List<SecurityQuestions> securityQns2() {
		@SuppressWarnings("unchecked")
		List<SecurityQuestions> securityQuestions = (List<SecurityQuestions>)getHibernateTemplate().find(
				"from SecurityQuestions sq where sq.qid > 5");
		
		return securityQuestions;

	}
	
	@Override
	public CustomerForm getCustomerDetail(String userid){
		List<Customer> detail = (List<Customer>)getHibernateTemplate().find(
				"from Customer cus where cus.userid=?",new Object[] { userid });
		
		CustomerForm customer = BeanUtils
				.instantiate(CustomerForm.class);
		if (detail.size() == 1) {
			BeanUtils.copyProperties(detail.get(0), customer);
		}
		return customer;
	}
	
	@Override
	public byte[] findPhoto(int id){
		List<Customer> customerList = (List<Customer>)getHibernateTemplate().find(
				"from Customer cus where cus.id=?",new Object[] { id }) ;
		if(customerList!=null&&customerList.size()==1){
			return customerList.get(0).getImage();
		}
		return null;
	}
}
